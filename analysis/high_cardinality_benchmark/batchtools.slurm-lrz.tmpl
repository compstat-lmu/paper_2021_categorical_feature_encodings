#!/bin/bash
<%# 
## Set some sane defaults
if (is.null(resources$ntasks))
  resources$ntasks = 1L
if (is.null(resources$ncpus))
  resources$ncpus = 1L
if (is.null(resources$nodes))
  resources$nodes = ceiling(resources$ncpus / 28)
-%>

#SBATCH --job-name=<%= job.hash %>
#SBATCH --output=<%= log.file %>
#SBATCH --error=<%= log.file %>
#SBATCH --get-user-env

#SBATCH --time=<%= ceiling(resources$walltime / 60L) -%>

<%=
## serial mode
if (resources$nodes == 1L & resources$ntasks == 1L & resources$ncpus == 1L) {
  cmd = "Rscript"
  mincpus = 1L
  
  resources$clusters = "serial"
  resources$partition = "serial_mpp2"
    
  paste0(
  "#SBATCH --ntasks=", resources$ntasks, "\n",
  "#SBATCH --cpus_per_task=", resources$ncpus, "\n",
  "#SBATCH --mem=", resources$memory, "\n")
  
## shared memory mode
} else if(resources$nodes == 1L & resources$ntasks == 1L & resources$ncpus >= 2L & resources$ncpus <= 28L) {
  cmd = "Rscript"
  
  resources$clusters = "mpp2"
  resources$partition = "mpp2_batch"
  
  paste0(
  "#SBATCH --nodes=1\n",
  "#SBATCH --ntasks=", resources$ntasks, "\n",
  "#SBATCH --cpus_per_task=", resources$ncpus, "\n")
  
  ## distributed memory mode
} else {
  cmd = "mpiexec Rscript"
  mincpus = 2L
  
  resources$clusters = "mpp2"
  resources$partition = "mpp2_batch"
  
  paste0(
  "#SBATCH --nodes=", resources$nodes, "\n",
  "#SBATCH --tasks_per_node=28\n",
  "#SBATCH --mem=", resources$memory, "\n")
}
-%>

#SBATCH --clusters=<%= resources$clusters %>
#SBATCH --partition=<%= resources$partition %>
  
<%= cmd %> -e 'batchtools::doJobCollection("<%= uri %>")'
